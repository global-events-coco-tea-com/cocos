{"version":3,"sources":["assets/halfOff.png","components/header.js","components/midbar.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Midbar","Main","useState","redeemed","setRedeemed","userAgent","navigator","vendor","window","opera","test","MSStream","getMobileOperatingSystem","src","HalfOff","alt","onClick","confirm","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,qC,wMCc5BC,G,YARA,WACb,OACE,yBAAKC,UAAU,UAAf,uB,cCeWC,G,MAfA,WACb,OACE,yBAAKD,UAAU,UACb,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAAeA,UAAU,cACzB,0BAAMA,UAAU,aAAhB,UAEF,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAAiBA,UAAU,cAC3B,0BAAMA,UAAU,aAAhB,a,+BCiDOE,EArCF,WAAO,IAAD,EACeC,mBAAS,qBADxB,mBACVC,EADU,KACAC,EADA,KAcjB,OACE,yBAAKL,UAAU,QAnCc,WAC/B,IAAIM,EAAYC,UAAUD,WAAaC,UAAUC,QAAUC,OAAOC,MAGlE,MAAI,iBAAiBC,KAAKL,GACjB,gBAGL,WAAWK,KAAKL,GACX,UAIL,mBAAmBK,KAAKL,KAAeG,OAAOG,SACzC,MAGF,UAaHC,GAOA,yBAAKb,UAAU,QAAQc,IAAKC,IAASC,IAAI,YACzC,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,iBAAf,WACA,yBAAKA,UAAU,mBAAf,6CACA,yBAAKA,UAAU,qBACb,oIACA,kFACA,qFAEF,4BAAQA,UAAwB,aAAbI,EAA0B,wBAA0B,gBAAiBa,QAAS,kBAtBrGZ,EAAY,iBACZI,OAAOS,QAAQ,yEAsBRd,GAEH,yBAAKJ,UAAU,OAAf,KACA,yBAAKA,UAAU,mBAAf,mBACA,4BAAQA,UAAU,QAAlB,WCtCOmB,G,MAXH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKnB,UAAU,UAAf,aCLcoB,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08190473.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/halfOff.6a77a698.png\";","// Imports\r\nimport React from 'react';\r\n\r\n// CSS\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      ã€Š Event Home\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","// Imports\r\nimport React from 'react';\r\nimport { FaChevronLeft } from 'react-icons/fa';\r\nimport { IoIosHeartEmpty } from 'react-icons/io';\r\n\r\n// CSS\r\nimport './midbar.css';\r\n\r\nconst Midbar = () => {\r\n  return (\r\n    <div className=\"midbar\">\r\n      <button className=\"back-button\">\r\n        <FaChevronLeft className=\"back-icon\" />\r\n        <span className=\"back-text\"> Back</span>\r\n      </button>\r\n      <button className=\"save-button\">\r\n        <IoIosHeartEmpty className=\"save-icon\" />\r\n        <span className=\"save-text\"> Save</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Midbar;","// Imports\r\nimport React, { useState } from 'react';\r\n\r\n// CSS\r\nimport './main.css';\r\n\r\n// Assets\r\nimport HalfOff from './../assets/halfOff.png';\r\n\r\nconst getMobileOperatingSystem = () => {\r\n  var userAgent = navigator.userAgent || navigator.vendor || window.opera;\r\n\r\n  // Windows Phone must come first because its UA also contains \"Android\"\r\n  if (/windows phone/i.test(userAgent)) {\r\n    return \"Windows Phone\";\r\n  }\r\n\r\n  if (/android/i.test(userAgent)) {\r\n    return \"Android\";\r\n  }\r\n\r\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\r\n  if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\r\n    return \"iOS\";\r\n  }\r\n\r\n  return \"unknown\";\r\n}\r\n\r\nconst Main = () => {\r\n  const [redeemed, setRedeemed] = useState(\"Redeem (by staff)\");\r\n\r\n  const redeemButtonClick = () => {\r\n    setRedeemed(\"Redeemed\");\r\n    window.confirm(\"Would you like to redeem your prize now? Click confirm to continue.\");\r\n  }\r\n\r\n  const renderModal = () => {\r\n    return (\r\n      getMobileOperatingSystem()\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {renderModal()}\r\n      <img className=\"offer\" src={HalfOff} alt=\"50% off\"></img>\r\n      <div className=\"promo-text\">\r\n        <div className=\"half-off-text\">50% OFF</div>\r\n        <div className=\"redemption-text\">Redemption dates: 2020-08-25 ~ 2020-10-09</div>\r\n        <div className=\"instructions-text\">\r\n          <p>1. Redeem the prize by showing the winning voucher at any CoCo Fresh Tea and Juice stores in Ontario.</p>\r\n          <p>2. Please let CoCo cashier press the redeem button.</p>\r\n          <p>3. Coupon is not valid once redeem button is pressed.</p>\r\n        </div>\r\n        <button className={redeemed === \"Redeemed\" ? \"redeem-button-clicked\" : \"redeem-button\"} onClick={() => redeemButtonClick()}>\r\n          {redeemed}\r\n        </button>\r\n        <div className=\"bar\"> </div>\r\n        <div className=\"winner-comments\">Winner Comments</div>\r\n        <button className=\"edit\">Edit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;","// Imports\r\nimport React from 'react';\r\n\r\n// Components\r\nimport Header from './components/header';\r\nimport Midbar from './components/midbar';\r\nimport Main from './components/main';\r\n\r\n// CSS\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Midbar />\r\n      <Main />\r\n      <div className=\"logout\">Logout</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}