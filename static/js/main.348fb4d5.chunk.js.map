{"version":3,"sources":["assets/halfOff.png","components/header.js","components/midbar.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Midbar","Main","useState","redeemed","setRedeemed","src","HalfOff","alt","onClick","window","confirm","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,qC,wMCc5BC,G,YARA,WACb,OACE,yBAAKC,UAAU,UAAf,uB,cCeWC,G,MAfA,WACb,OACE,yBAAKD,UAAU,UACb,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAAeA,UAAU,cACzB,0BAAMA,UAAU,aAAhB,UAEF,4BAAQA,UAAU,eAChB,kBAAC,IAAD,CAAiBA,UAAU,cAC3B,0BAAMA,UAAU,aAAhB,a,+BCsBOE,EA9BF,WAAO,IAAD,EACeC,mBAAS,qBADxB,mBACVC,EADU,KACAC,EADA,KAQjB,OACE,yBAAKL,UAAU,QACb,yBAAKA,UAAU,QAAQM,IAAKC,IAASC,IAAI,YACzC,yBAAKR,UAAU,cACb,yBAAKA,UAAU,iBAAf,WACA,yBAAKA,UAAU,mBAAf,6CACA,yBAAKA,UAAU,qBACb,oIACA,kFACA,qFAEF,4BAAQA,UAAwB,aAAbI,EAA0B,wBAA0B,gBAAiBK,QAAS,kBAfrGJ,EAAY,iBACZK,OAAOC,QAAQ,yEAeRP,GAEH,yBAAKJ,UAAU,OAAf,KACA,yBAAKA,UAAU,mBAAf,mBACA,4BAAQA,UAAU,QAAlB,WCXOY,G,MAXH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKZ,UAAU,UAAf,aCLca,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.348fb4d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/halfOff.6a77a698.png\";","// Imports\r\nimport React from 'react';\r\n\r\n// CSS\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      ã€Š Event Home\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","// Imports\r\nimport React from 'react';\r\nimport { FaChevronLeft } from 'react-icons/fa';\r\nimport { IoIosHeartEmpty } from 'react-icons/io';\r\n\r\n// CSS\r\nimport './midbar.css';\r\n\r\nconst Midbar = () => {\r\n  return (\r\n    <div className=\"midbar\">\r\n      <button className=\"back-button\">\r\n        <FaChevronLeft className=\"back-icon\" />\r\n        <span className=\"back-text\"> Back</span>\r\n      </button>\r\n      <button className=\"save-button\">\r\n        <IoIosHeartEmpty className=\"save-icon\" />\r\n        <span className=\"save-text\"> Save</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Midbar;","// Imports\r\nimport React, { useState } from 'react';\r\n\r\n// CSS\r\nimport './main.css';\r\n\r\n// Assets\r\nimport HalfOff from './../assets/halfOff.png';\r\n\r\nconst Main = () => {\r\n  const [redeemed, setRedeemed] = useState(\"Redeem (by staff)\");\r\n\r\n  const redeemButtonClick = () => {\r\n    setRedeemed(\"Redeemed\");\r\n    window.confirm(\"Would you like to redeem your prize now? Click confirm to continue.\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <img className=\"offer\" src={HalfOff} alt=\"50% off\"></img>\r\n      <div className=\"promo-text\">\r\n        <div className=\"half-off-text\">50% OFF</div>\r\n        <div className=\"redemption-text\">Redemption dates: 2020-08-25 ~ 2020-10-09</div>\r\n        <div className=\"instructions-text\">\r\n          <p>1. Redeem the prize by showing the winning voucher at any CoCo Fresh Tea and Juice stores in Ontario.</p>\r\n          <p>2. Please let CoCo cashier press the redeem button.</p>\r\n          <p>3. Coupon is not valid once redeem button is pressed.</p>\r\n        </div>\r\n        <button className={redeemed === \"Redeemed\" ? \"redeem-button-clicked\" : \"redeem-button\"} onClick={() => redeemButtonClick()}>\r\n          {redeemed}\r\n        </button>\r\n        <div className=\"bar\"> </div>\r\n        <div className=\"winner-comments\">Winner Comments</div>\r\n        <button className=\"edit\">Edit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;","// Imports\nimport React from 'react';\n\n// Components\nimport Header from './components/header';\nimport Midbar from './components/midbar';\nimport Main from './components/main';\n\n// CSS\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Midbar />\n      <Main />\n      <div className=\"logout\">Logout</div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}